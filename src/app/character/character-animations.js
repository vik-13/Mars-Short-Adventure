window.characterAnimations = (() => {
  const size = [35, 73];
  const gMain = [[[19,42,22,59,14,73],"black","#fff",1],[[20,42,29,56,27,73],"#000000","#fff",1],[[22,16,9,26,22,38,15,26],"#000000","#fff",1],[[21,15,18,41,10,45,4,19],"#000000","#fff",1],[[20,41,22,15,27,29],"#000000","#fff",1],[[17,13,30,13,34,3,6,0],"#000000","#fff",1],[[29,6,25,5,26,8],"#000000","red",1],[[4,31,48,29,47,34,31,35,27,39,0,37],"#000000","red",1],[[22,15,9,26,22,38,15,26],"#000000","#fff",1]];
  const gList = {
    stay: [
      gMain,
      [[[19,45,23,60,14,73],[20,45,30,58,27,73],[22,19,9,29,22,41,15,29],[21,18,19,44,10,48,4,23],[20,44,23,18,28,33],[16,17,29,18,34,8,6,3],[29,10,25,9,26,12],[4,33,48,32,47,37,31,38,27,42,0,39],[22,19,9,30,22,42,14,30]]],
      700,
      false
    ],
    walk: [
      gMain,
      [[[19,43,16,61,-1,71],[21,44,35,52,38,71],[22,18,9,29,22,41,15,28],[22,17,19,43,10,46,5,21],[20,43,24,17,28,32],[17,15,30,15,34,5,6,2],[29,8,25,7,26,10],[4,32,48,30,47,35,31,37,27,41,0,39],[22,19,10,30,22,42,15,29]],[0,0,0,0,0,0,0,0,0],[[22,44,38,53,45,72],[19,44,16,60,-4,72],[22,19,9,30,22,42,15,29],[23,17,19,43,10,46,6,21],[21,44,24,18,28,32],[17,15,31,16,34,6,7,2],[29,8,25,7,26,10],[2,33,46,31,45,36,29,37,25,41,-2,39],[22,19,10,30,22,42,15,30]]],
      200,
      false
    ],
    jump: [
      gMain,
      [[[19,43,15,60,-2,73],[20,42,38,41,27,55],[22,16,10,26,22,39,15,26],[22,15,19,41,10,44,5,19],[20,41,24,15,28,29],[19,14,32,9,32,-1,5,5],[28,3,24,4,26,6],[4,31,48,29,47,34,31,35,27,39,0,37],[22,15,9,26,22,38,15,26]]],
      300,
      true
    ],
    fall: [
      gMain,
      [[[19,42,27,57,22,73],[19,42,33,56,36,73],[22,16,11,28,23,42,17,28],[18,15,19,41,11,46,2,22],[21,42,19,15,26,29],[11,11,24,13,29,4,2,-4],[23,6,19,5,20,8],[2,29,46,27,45,32,29,34,26,38,-2,36],[22,16,9,27,24,37,14,27]]],
      300,
      true
    ],
    drop: [
      gMain,
      [[[17,61,29,66,14,73],[19,60,39,66,27,73],[25,37,12,48,25,60,18,47],[21,36,18,62,9,65,4,40],[20,63,22,37,27,51],[17,37,30,38,34,28,6,24],[29,30,24,29,26,32],[5,51,49,49,48,54,32,56,29,60,1,58],[24,37,12,48,24,60,17,48]]],
      150,
      true
    ],
    sit: [
      gMain,
      [[[17,61,29,66,14,73],[19,60,39,66,27,73],[25,37,12,48,25,60,18,47],[21,36,18,62,9,65,4,40],[20,63,22,37,27,51],[17,37,30,38,34,28,6,24],[29,30,24,29,26,32],[5,51,49,49,48,54,32,56,29,60,1,58],[24,37,12,48,24,60,17,48]]],
      150,
      true
    ],
    wall: [
      [[[21,44,33,55,32,74],"black","#fff",1],[[22,44,34,35,33,53],"#000000","#fff",1],[[20,19,27,31,35,14,26,24],"#000000","#fff",1],[[19,17,21,44,13,48,3,25],"#000000","#fff",1],[[24,43,21,17,28,30],"#000000","#fff",1],[[17,19,25,9,20,0,0,19],"#000000","#fff",1],[[20,5,16,8,20,9],"#000000","red",1],[[11,59,7,15,12,16,14,32,18,35,18,63],"#000000","red",1],[[21,18,33,18,36,2,31,14],"#000000","#fff",1]],
      []
    ],
    climb: [
      [[[21,44,33,55,32,74],"black","#fff",1],[[22,44,34,35,33,53],"#000000","#fff",1],[[20,19,27,31,35,14,26,24],"#000000","#fff",1],[[19,17,21,44,13,48,3,25],"#000000","#fff",1],[[24,43,21,17,28,30],"#000000","#fff",1],[[17,19,25,9,20,0,0,19],"#000000","#fff",1],[[20,5,16,8,20,9],"#000000","red",1],[[11,59,7,15,12,16,14,32,18,35,18,63],"#000000","red",1],[[21,18,33,18,36,2,31,14],"#000000","#fff",1]],
      [[[21,44,34,33,34,50],[21,45,33,57,33,74],[20,19,33,14,36,1,28,11],[19,18,21,44,13,49,3,25],[23,44,20,18,27,31],[17,18,25,8,20,-1,0,18],[20,4,16,8,20,8],[11,60,7,17,12,17,14,33,18,37,18,64],[21,18,32,29,35,15,31,21]]],
      300
    ],
    die: [
      gMain,
      [[[-8,62,8,67,17,81],[65,63,52,73,35,73],[51,68,34,68,21,74,39,71],[4,44,22,63,19,72,-3,60],[16,64,42,65,29,70],[57,72,70,72,74,62,46,59],[69,66,64,65,65,68],[9,66,53,64,52,69,36,70,32,74,5,72],[-19,68,-3,73,13,71,-6,69]]],
      1000,
      true
    ],
  };

  let current = new Anim(...gList.stay, 300);
  let currentName = 'stay';
  let mirrored = false;
  let nextAnim;
  let isBlocked = false;

  function next() {
    if (!nextAnim) return;
    current = new Anim(...gList[nextAnim]);
    currentName = nextAnim;
    nextAnim = null;
    isBlocked = false;
  }

  return {
    direction: () => mirrored ? -1 : 1,
    mirror: (value) => {
      mirrored = value;
    },
    to: (name, blocked, force) => {
      if (name === 'walk') {
        sfx.run();
      } else if (name === 'wall') {
        sfx.wall();
      } else if (name === 'flying') {
        sfx.flying();
      }
      if (currentName === name) return;
      if (name === 'jump') {
        sfx.jump();
      } else if (name === 'drop') {
        sfx.fall();
      } else if (name === 'die') {
        sfx.die();
      }
      if (isBlocked && !force) {
        nextAnim = name;
      } else {
        current = new Anim(...gList[name]);
        currentName = name;
        isBlocked = blocked;
      }
    },
    r: (position, scale) => {
      let s = scale || 1;
      c.translate(position.x + (size[0] / 2), position.y + (size[1] / 2));
      c.scale( mirrored ? -s : s, -s);
      draw.r(current.n(), size, 3);
      if (isBlocked && current.isFinished()) {
        next();
      }
    }
  };
})();
